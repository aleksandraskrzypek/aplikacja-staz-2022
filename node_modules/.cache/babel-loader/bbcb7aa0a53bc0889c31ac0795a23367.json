{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useEventListener } from '../useEventListener';\n\nfunction useLocalStorage(key, initialValue) {\n  const readValue = useCallback(() => {\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? parseJSON(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error);\n      return initialValue;\n    }\n  }, [initialValue, key]);\n  const [storedValue, setStoredValue] = useState(readValue);\n  const setValue = useCallback(value => {\n    if (typeof window == 'undefined') {\n      console.warn(`Tried setting localStorage key “${key}” even though environment is not a client`);\n    }\n\n    try {\n      const newValue = value instanceof Function ? value(storedValue) : value;\n      window.localStorage.setItem(key, JSON.stringify(newValue));\n      setStoredValue(newValue);\n      window.dispatchEvent(new Event('local-storage'));\n    } catch (error) {\n      console.warn(`Error setting localStorage key “${key}”:`, error);\n    }\n  }, [key, storedValue]);\n  useEffect(() => {\n    setStoredValue(readValue());\n  }, []);\n  const handleStorageChange = useCallback(() => {\n    setStoredValue(readValue());\n  }, [readValue]);\n  useEventListener('storage', handleStorageChange);\n  useEventListener('local-storage', handleStorageChange);\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n\nfunction parseJSON(value) {\n  try {\n    return value === 'undefined' ? undefined : JSON.parse(value ?? '');\n  } catch {\n    console.log('parsing error on', {\n      value\n    });\n    return undefined;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAGEA,WAHF,EAIEC,SAJF,EAKEC,QALF,QAMO,OANP;AASA,SAASC,gBAAT,QAAiC,qBAAjC;;AAUA,SAASC,eAAT,CAA4BC,GAA5B,EAAyCC,YAAzC,EAAwD;AAGtD,QAAMC,SAAS,GAAGP,WAAW,CAAC,MAAQ;AAEpC,QAAI,OAAOQ,MAAP,KAAkB,WAAtB,EAAmC;AACjC,aAAOF,YAAP;AACD;;AAED,QAAI;AACF,YAAMG,IAAI,GAAGD,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4BN,GAA5B,CAAb;AACA,aAAOI,IAAI,GAAIG,SAAS,CAACH,IAAD,CAAb,GAA4BH,YAAvC;AACD,KAHD,CAGE,OAAOO,KAAP,EAAc;AACdC,aAAO,CAACC,IAAR,CAAa,mCAAmCV,GAAG,IAAnD,EAAyDQ,KAAzD;AACA,aAAOP,YAAP;AACD;AACF,GAb4B,EAa1B,CAACA,YAAD,EAAeD,GAAf,CAb0B,CAA7B;AAiBA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAIK,SAAJ,CAA9C;AAIA,QAAMW,QAAQ,GAAgBlB,WAAW,CACvCmB,KAAK,IAAG;AAEN,QAAI,OAAOX,MAAP,IAAiB,WAArB,EAAkC;AAChCM,aAAO,CAACC,IAAR,CACE,mCAAmCV,GAAG,2CADxC;AAGD;;AAED,QAAI;AAEF,YAAMe,QAAQ,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,WAAD,CAAjC,GAAiDG,KAAlE;AAGAX,YAAM,CAACE,YAAP,CAAoBY,OAApB,CAA4BjB,GAA5B,EAAiCkB,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAjC;AAGAH,oBAAc,CAACG,QAAD,CAAd;AAGAZ,YAAM,CAACiB,aAAP,CAAqB,IAAIC,KAAJ,CAAU,eAAV,CAArB;AACD,KAZD,CAYE,OAAOb,KAAP,EAAc;AACdC,aAAO,CAACC,IAAR,CAAa,mCAAmCV,GAAG,IAAnD,EAAyDQ,KAAzD;AACD;AACF,GAxBsC,EAyBvC,CAACR,GAAD,EAAMW,WAAN,CAzBuC,CAAzC;AA4BAf,WAAS,CAAC,MAAK;AACbgB,kBAAc,CAACV,SAAS,EAAV,CAAd;AAED,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAMoB,mBAAmB,GAAG3B,WAAW,CAAC,MAAK;AAC3CiB,kBAAc,CAACV,SAAS,EAAV,CAAd;AACD,GAFsC,EAEpC,CAACA,SAAD,CAFoC,CAAvC;AAKAJ,kBAAgB,CAAC,SAAD,EAAYwB,mBAAZ,CAAhB;AAIAxB,kBAAgB,CAAC,eAAD,EAAkBwB,mBAAlB,CAAhB;AAEA,SAAO,CAACX,WAAD,EAAcE,QAAd,CAAP;AACD;;AAED,eAAed,eAAf;;AAGA,SAASQ,SAAT,CAAsBO,KAAtB,EAA0C;AACxC,MAAI;AACF,WAAOA,KAAK,KAAK,WAAV,GAAwBS,SAAxB,GAAoCL,IAAI,CAACM,KAAL,CAAWV,KAAK,IAAI,EAApB,CAA3C;AACD,GAFD,CAEE,MAAM;AACNL,WAAO,CAACgB,GAAR,CAAY,kBAAZ,EAAgC;AAAEX;AAAF,KAAhC;AACA,WAAOS,SAAP;AACD;AACF","names":["useCallback","useEffect","useState","useEventListener","useLocalStorage","key","initialValue","readValue","window","item","localStorage","getItem","parseJSON","error","console","warn","storedValue","setStoredValue","setValue","value","newValue","Function","setItem","JSON","stringify","dispatchEvent","Event","handleStorageChange","undefined","parse","log"],"sources":["/home/ola/Desktop/frontend/aplikacja-staz/node_modules/usehooks-ts/src/useLocalStorage/useLocalStorage.ts"],"sourcesContent":["import {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react'\n\n// See: https://usehooks-ts.com/react-hook/use-event-listener\nimport { useEventListener } from '../useEventListener'\n\ndeclare global {\n  interface WindowEventMap {\n    'local-storage': CustomEvent\n  }\n}\n\ntype SetValue<T> = Dispatch<SetStateAction<T>>\n\nfunction useLocalStorage<T>(key: string, initialValue: T): [T, SetValue<T>] {\n  // Get from local storage then\n  // parse stored json or return initialValue\n  const readValue = useCallback((): T => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window === 'undefined') {\n      return initialValue\n    }\n\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? (parseJSON(item) as T) : initialValue\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error)\n      return initialValue\n    }\n  }, [initialValue, key])\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(readValue)\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue: SetValue<T> = useCallback(\n    value => {\n      // Prevent build error \"window is undefined\" but keeps working\n      if (typeof window == 'undefined') {\n        console.warn(\n          `Tried setting localStorage key “${key}” even though environment is not a client`,\n        )\n      }\n\n      try {\n        // Allow value to be a function so we have the same API as useState\n        const newValue = value instanceof Function ? value(storedValue) : value\n\n        // Save to local storage\n        window.localStorage.setItem(key, JSON.stringify(newValue))\n\n        // Save state\n        setStoredValue(newValue)\n\n        // We dispatch a custom event so every useLocalStorage hook are notified\n        window.dispatchEvent(new Event('local-storage'))\n      } catch (error) {\n        console.warn(`Error setting localStorage key “${key}”:`, error)\n      }\n    },\n    [key, storedValue],\n  )\n\n  useEffect(() => {\n    setStoredValue(readValue())\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleStorageChange = useCallback(() => {\n    setStoredValue(readValue())\n  }, [readValue])\n\n  // this only works for other documents, not the current one\n  useEventListener('storage', handleStorageChange)\n\n  // this is a custom event, triggered in writeValueToLocalStorage\n  // See: useLocalStorage()\n  useEventListener('local-storage', handleStorageChange)\n\n  return [storedValue, setValue]\n}\n\nexport default useLocalStorage\n\n// A wrapper for \"JSON.parse()\"\" to support \"undefined\" value\nfunction parseJSON<T>(value: string | null): T | undefined {\n  try {\n    return value === 'undefined' ? undefined : JSON.parse(value ?? '')\n  } catch {\n    console.log('parsing error on', { value })\n    return undefined\n  }\n}\n"]},"metadata":{},"sourceType":"module"}